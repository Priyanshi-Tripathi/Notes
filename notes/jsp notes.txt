1. Advantages of JSP over Servlet :
	i) Extension to Servlet
	ii) Easy to maintain
	iii) Fast Development: No need to recompile and redeploy
	iv) Less code than Servlet

2. In public void _jspService() underscore ( _ ) signifies that you cannot override this method.

3. The scripting elements provides the ability to insert java code inside the jsp.

4. Types of scripting elements:
	i) scriptlet tag
	ii) expression tag
	iii) declaration tag

5. A scriptlet tag is used to execute java source code in JSP.. Syntax :
	<%  java source code ; %>

6. The code placed within JSP expression tag is written to the output stream of the response ie need not write out.print() to write data. It is mainly used to print the values of variable or method.. Syntax : 
	<%=  statement %> 

7. The JSP declaration tag is used to declare fields and methods.

8. The code written inside the jsp declaration tag is placed outside the service() method of auto generated servlet.
So it doesn't get memory at each request .. Syntax : 
	<%!  field or method declaration %>

9. The declaration of scriptlet tag is placed inside the _jspService() method.

10. Implicit objects are created by the web container and are available to all the jsp pages.

	Object		Type	
	out		JspWriter			-
	request		HttpServletRequest		created for each jsp request by the web container
	response		HttpServletResponse	created by the web container for each jsp request
	config		ServletConfig		created by the web container for each jsp page
	application	ServletContext		created only once by the web container when application or 						project is deployed on the server
	session		HttpSession		-
	pageContext	PageContext		-
	page		Object			
	exception		Throwable		

11. In JSP, page scope is the default scope.

12. In JSP, page is an implicit object of type Object class.This object is assigned to the reference of auto generated servlet class. It is written as:
	Object page = this;
For using this object it must be cast to Servlet type .. Eg :
	<% (HttpServlet)page.log("message"); %>
Since, it is of type Object it is less used because you can use this object directly in jsp .. Eg :
	<% this.log("message"); %>

13. exception can only be used in error pages.

14. jsp directives are messages that tells the web container how to translate a JSP page into the corresponding servlet.

15. Types of directives:
	i) page directive
	ii) include directive
	iii) taglib directive

16. Syntax of directive
	<%@ directive attribute="value" %>  

17. Attributes of JSP page directive
	i) import
	ii) contentType
	iii) extends
	iv) info
	v) buffer
	vi) language
	vii) isELIgnored
	viii) isThreadSafe
	ix) autoFlush
	x) session
	xi) pageEncoding
	xii) errorPage
	xiii) isErrorPage

18. In JSP, contentType default value is "text/html;charset=ISO-8859-1".

19. The extends attribute defines the parent class that will be inherited by the generated servlet.It is rarely used.

20. info attribute simply sets the information of the JSP page which is retrieved later by using getServletInfo() method of Servlet interface.

21. The buffer attribute sets the buffer size in kilobytes to handle output generated by the JSP page.The default size of the buffer is 8Kb.

22. The language attribute specifies the scripting language used in the JSP page. The default value is "java".

23.To ignore the Expression Language (EL) in jsp by the isELIgnored attribute. By default its value is false i.e. Expression Language is enabled by default.
	<%@ page isELIgnored="true" %> // Now EL will be ignored  

24. Servlet and JSP both are multithreaded. To control this behaviour of JSP page, we use isThreadSafe attribute of page directive.

25. The value of isThreadSafe value is true. If you make it false, the web container will serialize the multiple requests, i.e. it will wait until the JSP finishes responding to a request before passing another request to it.

26. If you make the value of isThreadSafe attribute like:
	<%@ page isThreadSafe="false" %>

The web container in such a case, will generate the servlet as:
	public class SimplePage_jsp extends HttpJspBase   
 		 implements SingleThreadModel{  
			.......  
		}  

27. The include directive is used to include the contents of any resource it may be jsp file, html file or text file. The include directive includes the original content of the included resource at page translation time (the jsp page is translated only once so it will be better to include static resource).

28. The include directive includes the original content, so the actual page size grows at runtime.

29. <web-app>  
  
 <error-page>  
  <exception-type>java.lang.Exception</exception-type>  
  <location>/error.jsp</location>  
  </error-page>  
   
</web-app>  
This approach is better if you want to handle any exception. If you know any specific error code and you want to handle that exception, specify the error-code element instead of exception-type as given below:

30. web.xml file to handle the exception for a specific error code and generic error
	<web-app> 
 		<error-page>  
  			<error-code>500</error-code>  
  			<location>/error.jsp</location>  
 		 </error-page>   

 		<error-page>  
  			<exception-type>java.lang.Exception</exception-type>  
  			<location>/error.jsp</location>  
  		</error-page> 
	</web-app>  

31. Action tags
	jsp:plugin		embeds another components such as applet.
	jsp:param		sets the parameter value. It is used in forward and include mostly.
	jsp:fallback	can be used to print the message if plugin is working. It is used in jsp:plugin.

32. jsp:include action tag is used to include the content of another resource it may be jsp, html or servlet.

33. Java Bean is a java class that should follow following conventions : 
	i) It should have a no-arg constructor.
	ii) It should be Serializable.
	iii) It should provide methods to set and get the values of the properties, known as getter and setter methods.

34.  The default scope is page for java bean.

35. The jsp:plugin action tag is used to embed applet in the jsp file. The jsp:plugin action tag downloads plugin at client side to execute an applet or bean.

36. EL is since JSP technology version 2.0.

37. Implicit objects in EL
	pageScope		it maps the given attribute name with the value set in the page scope
	requestScope		it maps the given attribute name with the value set in the request scope
	sessionScope		it maps the given attribute name with the value set in the session scope
	applicationScope		it maps the given attribute name with the value set in the application scope
	param			it maps the request parameter to the single value
	paramValues		it maps the request parameter to an array of values
	header			it maps the request header name to the single value
	headerValues		it maps the request header name to an array of values
	cookie			it maps the given cookie name to the cookie value
	initParam			it maps the initialization parameter
	pageContext		it provides access to many objects request, session etc.

38. c:import is just like jsp include but it can include the content of any resource either within server or outside the server.

39. For creating any custom tag :
	i) Create the Tag handler class and perform action at the start or at the end of the tag.
	ii) Create the Tag Library Descriptor (TLD) file and define tags
	iii) Create the JSP file that uses the Custom tag defined in the TLD file

40. To create the Tag Handler, inherit the TagSupport class and overriding its method doStartTag().To write data for the jsp, we need to use the JspWriter class.

The PageContext class provides getOut() method that returns the instance of JspWriter class.
TagSupport class provides instance of pageContext bydefault.

Eg : 
	public class MyTagHandler extends TagSupport{  
		
		public int doStartTag() throws JspException {  
    			JspWriter out=pageContext.getOut();//returns the instance of JspWriter  
    			try{  
     				out.print(Calendar.getInstance().getTime());// printing date and time using 											JspWriter  
    			}
			catch(Exception e){System.out.println(e);}  
    			return SKIP_BODY; / /will not evaluate the body content of the tag  
		}  
	}  

41. Tag Library Descriptor (TLD) file contains information of tag and Tag Hander classes. It must be contained inside the WEB-INF directory.

Eg : 
	<?xml version="1.0" encoding="ISO-8859-1" ?>  
	<!DOCTYPE taglib PUBLIC "-//Sun Microsystems, Inc.//DTD JSP Tag Library 					1.2//EN" "http://java.sun.com/j2ee/dtd/web-jsptaglibrary_1_2.dtd">  
  
	<taglib>  
  		<tlib-version>1.0</tlib-version>  
		<jsp-version>1.2</jsp-version>  
  		<short-name>simple</short-name>  
  		<uri>http://tomcat.apache.org/example-taglib</uri>  
		<tag>  
			<name>today</name>  
			<tag-class>com.javatpoint.sonoo.MyTagHandler</tag-class>  
		</tag>  
	</taglib> 

42. In case you want to pass a value to your TagHandler class.. TLD will be like
 	<tag>  
   		 <name>cube</name>  
    		<tag-class>com.javatpoint.taghandler.CubeNumber</tag-class>  
    		<attribute>  
    			<name>number</name>  
    			<required>true</required>  
    		</attribute>  
  	</tag>  


NOTE:
Clear custom jsp tags and file uploading and downloading.